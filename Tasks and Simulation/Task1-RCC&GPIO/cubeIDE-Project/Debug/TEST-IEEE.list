
TEST-IEEE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a58  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b88  08000b90  00010b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b88  08000b88  00010b90  2**0
                  CONTENTS
  4 .ARM          00000000  08000b88  08000b88  00010b90  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b88  08000b90  00010b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b88  08000b88  00010b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b8c  08000b8c  00010b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b90  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b90  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b90  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010bb9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000486  00000000  00000000  00010bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000267  00000000  00000000  00011082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000112f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000082  00000000  00000000  000113b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000fd1  00000000  00000000  00011432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000552  00000000  00000000  00012403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004357  00000000  00000000  00012955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000294  00000000  00000000  00016cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00016f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b70 	.word	0x08000b70

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b70 	.word	0x08000b70

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_d2uiz>:
 80004e8:	004a      	lsls	r2, r1, #1
 80004ea:	d211      	bcs.n	8000510 <__aeabi_d2uiz+0x28>
 80004ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004f0:	d211      	bcs.n	8000516 <__aeabi_d2uiz+0x2e>
 80004f2:	d50d      	bpl.n	8000510 <__aeabi_d2uiz+0x28>
 80004f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004fc:	d40e      	bmi.n	800051c <__aeabi_d2uiz+0x34>
 80004fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000506:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800050a:	fa23 f002 	lsr.w	r0, r3, r2
 800050e:	4770      	bx	lr
 8000510:	f04f 0000 	mov.w	r0, #0
 8000514:	4770      	bx	lr
 8000516:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800051a:	d102      	bne.n	8000522 <__aeabi_d2uiz+0x3a>
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	4770      	bx	lr
 8000522:	f04f 0000 	mov.w	r0, #0
 8000526:	4770      	bx	lr

08000528 <MCAL_GPIO_SetPinMode>:
#include "GPIO_interface.h"
#include "GPIO_private.h"
#include "GPIO_config.h"
/*****************************< Function Implementations *****************************/
Std_ReturnType MCAL_GPIO_SetPinMode(u8 Copy_PortId, u8 Copy_PinId, u8 Copy_PinMode)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	460b      	mov	r3, r1
 8000534:	71bb      	strb	r3, [r7, #6]
 8000536:	4613      	mov	r3, r2
 8000538:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 800053a:	2300      	movs	r3, #0
 800053c:	73fb      	strb	r3, [r7, #15]

    switch (Copy_PortId)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b02      	cmp	r3, #2
 8000542:	f000 8082 	beq.w	800064a <MCAL_GPIO_SetPinMode+0x122>
 8000546:	2b02      	cmp	r3, #2
 8000548:	f300 80bc 	bgt.w	80006c4 <MCAL_GPIO_SetPinMode+0x19c>
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <MCAL_GPIO_SetPinMode+0x2e>
 8000550:	2b01      	cmp	r3, #1
 8000552:	d03d      	beq.n	80005d0 <MCAL_GPIO_SetPinMode+0xa8>
 8000554:	e0b6      	b.n	80006c4 <MCAL_GPIO_SetPinMode+0x19c>
    {
    case GPIO_PORTA:
        if(Copy_PinId < 8)
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	2b07      	cmp	r3, #7
 800055a:	d819      	bhi.n	8000590 <MCAL_GPIO_SetPinMode+0x68>
        {
            GPIOA_CRL &= ~((0b1111) << (Copy_PinId * 4)); 
 800055c:	4b5e      	ldr	r3, [pc, #376]	; (80006d8 <MCAL_GPIO_SetPinMode+0x1b0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	79ba      	ldrb	r2, [r7, #6]
 8000562:	0092      	lsls	r2, r2, #2
 8000564:	210f      	movs	r1, #15
 8000566:	fa01 f202 	lsl.w	r2, r1, r2
 800056a:	43d2      	mvns	r2, r2
 800056c:	4611      	mov	r1, r2
 800056e:	4a5a      	ldr	r2, [pc, #360]	; (80006d8 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000570:	400b      	ands	r3, r1
 8000572:	6013      	str	r3, [r2, #0]
            GPIOA_CRL |= (Copy_PinMode << (Copy_PinId * 4));
 8000574:	4b58      	ldr	r3, [pc, #352]	; (80006d8 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	7979      	ldrb	r1, [r7, #5]
 800057a:	79ba      	ldrb	r2, [r7, #6]
 800057c:	0092      	lsls	r2, r2, #2
 800057e:	fa01 f202 	lsl.w	r2, r1, r2
 8000582:	4611      	mov	r1, r2
 8000584:	4a54      	ldr	r2, [pc, #336]	; (80006d8 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 800058a:	2301      	movs	r3, #1
 800058c:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
        break;
 800058e:	e09c      	b.n	80006ca <MCAL_GPIO_SetPinMode+0x1a2>
        else if(Copy_PinId < 16)
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	2b0f      	cmp	r3, #15
 8000594:	d819      	bhi.n	80005ca <MCAL_GPIO_SetPinMode+0xa2>
            GPIOA_CRH &= ~((0b1111) << (Copy_PinId * 4)); 
 8000596:	4b51      	ldr	r3, [pc, #324]	; (80006dc <MCAL_GPIO_SetPinMode+0x1b4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	79ba      	ldrb	r2, [r7, #6]
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	210f      	movs	r1, #15
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	43d2      	mvns	r2, r2
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a4c      	ldr	r2, [pc, #304]	; (80006dc <MCAL_GPIO_SetPinMode+0x1b4>)
 80005aa:	400b      	ands	r3, r1
 80005ac:	6013      	str	r3, [r2, #0]
            GPIOA_CRH |= (Copy_PinMode << (Copy_PinId * 4));
 80005ae:	4b4b      	ldr	r3, [pc, #300]	; (80006dc <MCAL_GPIO_SetPinMode+0x1b4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	7979      	ldrb	r1, [r7, #5]
 80005b4:	79ba      	ldrb	r2, [r7, #6]
 80005b6:	0092      	lsls	r2, r2, #2
 80005b8:	fa01 f202 	lsl.w	r2, r1, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a47      	ldr	r2, [pc, #284]	; (80006dc <MCAL_GPIO_SetPinMode+0x1b4>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
        break;
 80005c8:	e07f      	b.n	80006ca <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
        break;
 80005ce:	e07c      	b.n	80006ca <MCAL_GPIO_SetPinMode+0x1a2>
    case GPIO_PORTB:
        if(Copy_PinId < 8)
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	d819      	bhi.n	800060a <MCAL_GPIO_SetPinMode+0xe2>
        {
            GPIOB_CRL &= ~((0b1111) << (Copy_PinId * 4)); 
 80005d6:	4b42      	ldr	r3, [pc, #264]	; (80006e0 <MCAL_GPIO_SetPinMode+0x1b8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	79ba      	ldrb	r2, [r7, #6]
 80005dc:	0092      	lsls	r2, r2, #2
 80005de:	210f      	movs	r1, #15
 80005e0:	fa01 f202 	lsl.w	r2, r1, r2
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a3d      	ldr	r2, [pc, #244]	; (80006e0 <MCAL_GPIO_SetPinMode+0x1b8>)
 80005ea:	400b      	ands	r3, r1
 80005ec:	6013      	str	r3, [r2, #0]
            GPIOB_CRL |= (Copy_PinMode << (Copy_PinId * 4));
 80005ee:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <MCAL_GPIO_SetPinMode+0x1b8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	7979      	ldrb	r1, [r7, #5]
 80005f4:	79ba      	ldrb	r2, [r7, #6]
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
        break;
 8000608:	e05f      	b.n	80006ca <MCAL_GPIO_SetPinMode+0x1a2>
        else if(Copy_PinId < 16)
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d819      	bhi.n	8000644 <MCAL_GPIO_SetPinMode+0x11c>
            GPIOB_CRH &= ~((0b1111) << (Copy_PinId * 4)); 
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <MCAL_GPIO_SetPinMode+0x1bc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	79ba      	ldrb	r2, [r7, #6]
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	210f      	movs	r1, #15
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	43d2      	mvns	r2, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <MCAL_GPIO_SetPinMode+0x1bc>)
 8000624:	400b      	ands	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
            GPIOB_CRH |= (Copy_PinMode << (Copy_PinId * 4));
 8000628:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <MCAL_GPIO_SetPinMode+0x1bc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	7979      	ldrb	r1, [r7, #5]
 800062e:	79ba      	ldrb	r2, [r7, #6]
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	4611      	mov	r1, r2
 8000638:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <MCAL_GPIO_SetPinMode+0x1bc>)
 800063a:	430b      	orrs	r3, r1
 800063c:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 800063e:	2301      	movs	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
        break;
 8000642:	e042      	b.n	80006ca <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
        break;
 8000648:	e03f      	b.n	80006ca <MCAL_GPIO_SetPinMode+0x1a2>
    case GPIO_PORTC:
        if(Copy_PinId < 8)
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b07      	cmp	r3, #7
 800064e:	d819      	bhi.n	8000684 <MCAL_GPIO_SetPinMode+0x15c>
        {
            GPIOC_CRL &= ~((0b1111) << (Copy_PinId * 4)); 
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	210f      	movs	r1, #15
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	43d2      	mvns	r2, r2
 8000660:	4611      	mov	r1, r2
 8000662:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000664:	400b      	ands	r3, r1
 8000666:	6013      	str	r3, [r2, #0]
            GPIOC_CRL |= (Copy_PinMode << (Copy_PinId * 4));
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MCAL_GPIO_SetPinMode+0x1c0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	7979      	ldrb	r1, [r7, #5]
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	4611      	mov	r1, r2
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <MCAL_GPIO_SetPinMode+0x1c0>)
 800067a:	430b      	orrs	r3, r1
 800067c:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 800067e:	2301      	movs	r3, #1
 8000680:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
        break;
 8000682:	e022      	b.n	80006ca <MCAL_GPIO_SetPinMode+0x1a2>
        else if(Copy_PinId < 16)
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	2b0f      	cmp	r3, #15
 8000688:	d819      	bhi.n	80006be <MCAL_GPIO_SetPinMode+0x196>
            GPIOC_CRH &= ~((0b1111) << (Copy_PinId * 4)); 
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MCAL_GPIO_SetPinMode+0x1c4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	79ba      	ldrb	r2, [r7, #6]
 8000690:	0092      	lsls	r2, r2, #2
 8000692:	210f      	movs	r1, #15
 8000694:	fa01 f202 	lsl.w	r2, r1, r2
 8000698:	43d2      	mvns	r2, r2
 800069a:	4611      	mov	r1, r2
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MCAL_GPIO_SetPinMode+0x1c4>)
 800069e:	400b      	ands	r3, r1
 80006a0:	6013      	str	r3, [r2, #0]
            GPIOC_CRH |= (Copy_PinMode << (Copy_PinId * 4));
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MCAL_GPIO_SetPinMode+0x1c4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	7979      	ldrb	r1, [r7, #5]
 80006a8:	79ba      	ldrb	r2, [r7, #6]
 80006aa:	0092      	lsls	r2, r2, #2
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <MCAL_GPIO_SetPinMode+0x1c4>)
 80006b4:	430b      	orrs	r3, r1
 80006b6:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80006b8:	2301      	movs	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]
        break;
 80006bc:	e005      	b.n	80006ca <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 80006be:	2300      	movs	r3, #0
 80006c0:	73fb      	strb	r3, [r7, #15]
        break;
 80006c2:	e002      	b.n	80006ca <MCAL_GPIO_SetPinMode+0x1a2>
    
    default:
        Local_FunctionStatus = E_NOT_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]
        break;
 80006c8:	bf00      	nop
    }

    return Local_FunctionStatus;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40010800 	.word	0x40010800
 80006dc:	40010804 	.word	0x40010804
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	40010c04 	.word	0x40010c04
 80006e8:	40011000 	.word	0x40011000
 80006ec:	40011004 	.word	0x40011004

080006f0 <MCAL_GPIO_SetPinValue>:

Std_ReturnType MCAL_GPIO_SetPinValue(u8 Copy_PortId, u8 Copy_PinId, u8 Copy_PinValue)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	460b      	mov	r3, r1
 80006fc:	71bb      	strb	r3, [r7, #6]
 80006fe:	4613      	mov	r3, r2
 8000700:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortId)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d04e      	beq.n	80007aa <MCAL_GPIO_SetPinValue+0xba>
 800070c:	2b02      	cmp	r3, #2
 800070e:	dc70      	bgt.n	80007f2 <MCAL_GPIO_SetPinValue+0x102>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <MCAL_GPIO_SetPinValue+0x2a>
 8000714:	2b01      	cmp	r3, #1
 8000716:	d024      	beq.n	8000762 <MCAL_GPIO_SetPinValue+0x72>
 8000718:	e06b      	b.n	80007f2 <MCAL_GPIO_SetPinValue+0x102>
    {
    case GPIO_PORTA:
        switch (Copy_PinValue)
 800071a:	797b      	ldrb	r3, [r7, #5]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d00e      	beq.n	800073e <MCAL_GPIO_SetPinValue+0x4e>
 8000720:	2b01      	cmp	r3, #1
 8000722:	d11a      	bne.n	800075a <MCAL_GPIO_SetPinValue+0x6a>
        {
        case GPIO_HIGH:
            SET_BIT(GPIOA_ODR, Copy_PinId);
 8000724:	4b37      	ldr	r3, [pc, #220]	; (8000804 <MCAL_GPIO_SetPinValue+0x114>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a34      	ldr	r2, [pc, #208]	; (8000804 <MCAL_GPIO_SetPinValue+0x114>)
 8000734:	430b      	orrs	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
            break;
 800073c:	e010      	b.n	8000760 <MCAL_GPIO_SetPinValue+0x70>
        case GPIO_LOW:
            CLR_BIT(GPIOA_ODR, Copy_PinId);
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MCAL_GPIO_SetPinValue+0x114>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	79ba      	ldrb	r2, [r7, #6]
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	43d2      	mvns	r2, r2
 800074c:	4611      	mov	r1, r2
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MCAL_GPIO_SetPinValue+0x114>)
 8000750:	400b      	ands	r3, r1
 8000752:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
            break;
 8000758:	e002      	b.n	8000760 <MCAL_GPIO_SetPinValue+0x70>
        
        default:
            Local_FunctionStatus = E_NOT_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
            break;
 800075e:	bf00      	nop
        }
        break;
 8000760:	e04a      	b.n	80007f8 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTB:
        switch (Copy_PinValue)
 8000762:	797b      	ldrb	r3, [r7, #5]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00e      	beq.n	8000786 <MCAL_GPIO_SetPinValue+0x96>
 8000768:	2b01      	cmp	r3, #1
 800076a:	d11a      	bne.n	80007a2 <MCAL_GPIO_SetPinValue+0xb2>
        {
        case GPIO_HIGH:
            SET_BIT(GPIOB_ODR, Copy_PinId);
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MCAL_GPIO_SetPinValue+0x118>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	79ba      	ldrb	r2, [r7, #6]
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f202 	lsl.w	r2, r1, r2
 8000778:	4611      	mov	r1, r2
 800077a:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MCAL_GPIO_SetPinValue+0x118>)
 800077c:	430b      	orrs	r3, r1
 800077e:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
            break;
 8000784:	e010      	b.n	80007a8 <MCAL_GPIO_SetPinValue+0xb8>
        case GPIO_LOW:
            CLR_BIT(GPIOB_ODR, Copy_PinId);
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MCAL_GPIO_SetPinValue+0x118>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	79ba      	ldrb	r2, [r7, #6]
 800078c:	2101      	movs	r1, #1
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	43d2      	mvns	r2, r2
 8000794:	4611      	mov	r1, r2
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MCAL_GPIO_SetPinValue+0x118>)
 8000798:	400b      	ands	r3, r1
 800079a:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 800079c:	2301      	movs	r3, #1
 800079e:	73fb      	strb	r3, [r7, #15]
            break;
 80007a0:	e002      	b.n	80007a8 <MCAL_GPIO_SetPinValue+0xb8>
        
        default:
            Local_FunctionStatus = E_NOT_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
            break;
 80007a6:	bf00      	nop
        }
        break;
 80007a8:	e026      	b.n	80007f8 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTC:
          switch (Copy_PinValue)
 80007aa:	797b      	ldrb	r3, [r7, #5]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00e      	beq.n	80007ce <MCAL_GPIO_SetPinValue+0xde>
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d11a      	bne.n	80007ea <MCAL_GPIO_SetPinValue+0xfa>
        {
        case GPIO_HIGH:
            SET_BIT(GPIOC_ODR, Copy_PinId);
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MCAL_GPIO_SetPinValue+0x11c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	79ba      	ldrb	r2, [r7, #6]
 80007ba:	2101      	movs	r1, #1
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MCAL_GPIO_SetPinValue+0x11c>)
 80007c4:	430b      	orrs	r3, r1
 80007c6:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80007c8:	2301      	movs	r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
            break;
 80007cc:	e010      	b.n	80007f0 <MCAL_GPIO_SetPinValue+0x100>
        case GPIO_LOW:
            CLR_BIT(GPIOC_ODR, Copy_PinId);
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MCAL_GPIO_SetPinValue+0x11c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	79ba      	ldrb	r2, [r7, #6]
 80007d4:	2101      	movs	r1, #1
 80007d6:	fa01 f202 	lsl.w	r2, r1, r2
 80007da:	43d2      	mvns	r2, r2
 80007dc:	4611      	mov	r1, r2
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <MCAL_GPIO_SetPinValue+0x11c>)
 80007e0:	400b      	ands	r3, r1
 80007e2:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80007e4:	2301      	movs	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
            break;
 80007e8:	e002      	b.n	80007f0 <MCAL_GPIO_SetPinValue+0x100>
        
        default:
            Local_FunctionStatus = E_NOT_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
            break;
 80007ee:	bf00      	nop
        }
        break;
 80007f0:	e002      	b.n	80007f8 <MCAL_GPIO_SetPinValue+0x108>
    
    default:
        Local_FunctionStatus = E_NOT_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
        break;
 80007f6:	bf00      	nop
    }

    return Local_FunctionStatus;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	4001080c 	.word	0x4001080c
 8000808:	40010c0c 	.word	0x40010c0c
 800080c:	4001100c 	.word	0x4001100c

08000810 <MCAL_GPIO_GetPinValue>:

Std_ReturnType MCAL_GPIO_GetPinValue(u8 Copy_PortId, u8 Copy_PinId, u8 *Copy_PinReturnValue)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	603a      	str	r2, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	460b      	mov	r3, r1
 800081e:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	73fb      	strb	r3, [r7, #15]

    if(Copy_PinReturnValue != NULL)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d03c      	beq.n	80008a4 <MCAL_GPIO_GetPinValue+0x94>
    {
        switch (Copy_PortId)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d026      	beq.n	800087e <MCAL_GPIO_GetPinValue+0x6e>
 8000830:	2b02      	cmp	r3, #2
 8000832:	dc34      	bgt.n	800089e <MCAL_GPIO_GetPinValue+0x8e>
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <MCAL_GPIO_GetPinValue+0x2e>
 8000838:	2b01      	cmp	r3, #1
 800083a:	d010      	beq.n	800085e <MCAL_GPIO_GetPinValue+0x4e>
 800083c:	e02f      	b.n	800089e <MCAL_GPIO_GetPinValue+0x8e>
        {
        case GPIO_PORTA:
            *Copy_PinReturnValue = GET_BIT(GPIOA_IDR, Copy_PinId);
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MCAL_GPIO_GetPinValue+0xa4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	79ba      	ldrb	r2, [r7, #6]
 8000844:	2101      	movs	r1, #1
 8000846:	fa01 f202 	lsl.w	r2, r1, r2
 800084a:	401a      	ands	r2, r3
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	fa22 f303 	lsr.w	r3, r2, r3
 8000852:	b2da      	uxtb	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	701a      	strb	r2, [r3, #0]
            Local_FunctionStatus = E_OK;
 8000858:	2301      	movs	r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
            break;
 800085c:	e024      	b.n	80008a8 <MCAL_GPIO_GetPinValue+0x98>
        case GPIO_PORTB:
            *Copy_PinReturnValue = GET_BIT(GPIOB_IDR, Copy_PinId);
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MCAL_GPIO_GetPinValue+0xa8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	79ba      	ldrb	r2, [r7, #6]
 8000864:	2101      	movs	r1, #1
 8000866:	fa01 f202 	lsl.w	r2, r1, r2
 800086a:	401a      	ands	r2, r3
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	fa22 f303 	lsr.w	r3, r2, r3
 8000872:	b2da      	uxtb	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	701a      	strb	r2, [r3, #0]
            Local_FunctionStatus = E_OK;
 8000878:	2301      	movs	r3, #1
 800087a:	73fb      	strb	r3, [r7, #15]
            break;
 800087c:	e014      	b.n	80008a8 <MCAL_GPIO_GetPinValue+0x98>
        case GPIO_PORTC:
            *Copy_PinReturnValue = GET_BIT(GPIOC_IDR, Copy_PinId);
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MCAL_GPIO_GetPinValue+0xac>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	79ba      	ldrb	r2, [r7, #6]
 8000884:	2101      	movs	r1, #1
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	401a      	ands	r2, r3
 800088c:	79bb      	ldrb	r3, [r7, #6]
 800088e:	fa22 f303 	lsr.w	r3, r2, r3
 8000892:	b2da      	uxtb	r2, r3
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	701a      	strb	r2, [r3, #0]
            Local_FunctionStatus = E_OK;
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
            break;
 800089c:	e004      	b.n	80008a8 <MCAL_GPIO_GetPinValue+0x98>
        
        default:
            Local_FunctionStatus = E_NOT_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
            break;
 80008a2:	e001      	b.n	80008a8 <MCAL_GPIO_GetPinValue+0x98>
        }
    }   
    else
    {
        Local_FunctionStatus = E_NOT_OK;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]
    }

    return Local_FunctionStatus;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	40010808 	.word	0x40010808
 80008b8:	40010c08 	.word	0x40010c08
 80008bc:	40011008 	.word	0x40011008

080008c0 <PLL_MUL_Calculator>:
#include "RCC_config.h"

/*****************************< Private Funciton Implementation Implementations *****************************/

Std_ReturnType PLL_MUL_Calculator(u8 Copy_u8Input_CLkValue, u8 Copy_u8MUL_Factor)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
	//Handle the 6.5 corner case
    Copy_u8MUL_Factor = (Copy_u8MUL_Factor == 0xD) ? 4.5 : Copy_u8MUL_Factor;
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	2b0d      	cmp	r3, #13
 80008d4:	d00c      	beq.n	80008f0 <PLL_MUL_Calculator+0x30>
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fd9b 	bl	8000414 <__aeabi_i2d>
 80008de:	4602      	mov	r2, r0
 80008e0:	460b      	mov	r3, r1
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	f7ff fdff 	bl	80004e8 <__aeabi_d2uiz>
 80008ea:	4603      	mov	r3, r0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	e000      	b.n	80008f2 <PLL_MUL_Calculator+0x32>
 80008f0:	2304      	movs	r3, #4
 80008f2:	71bb      	strb	r3, [r7, #6]

    //conditional for the Frequency value
	if((Copy_u8Input_CLkValue * (Copy_u8MUL_Factor + 2)) <= F_SAFE_LIMIT)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	3202      	adds	r2, #2
 80008fa:	fb02 f303 	mul.w	r3, r2, r3
 80008fe:	2b20      	cmp	r3, #32
 8000900:	dc01      	bgt.n	8000906 <PLL_MUL_Calculator+0x46>
	{
		return E_OK;
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <PLL_MUL_Calculator+0x48>
	}
	else{
		return E_NOT_OK;
 8000906:	2300      	movs	r3, #0
	}
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <MCAL_RCC_InitSysClock>:


/*****************************< API Implementations *****************************/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	71fb      	strb	r3, [r7, #7]

    #elif RCC_SYSCLK == RCC_PLL

        /**< Specify PLL source. */
		#if RCC_PLL_SRC == RCC_HSE
        	SET_BIT(RCC_CFGR, RCC_CFGR_PLLSRC);            //PREDIV1 SELECTED (HSE undivided reset value)
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 8000920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000924:	6013      	str	r3, [r2, #0]
		#elif RCC_PLL_SRC == RCC_HSI
        	CLR_BIT(RCC_CFGR, RCC_CFGR_PLLSRC);            //HSI/2 SELECTED
		#endif

        /**< Check if multiplied value is within safe frequency limit. */
		if(PLL_MUL_Calculator(RCC_PLL_INPUT_VAL, RCC_PLL_MUL) == E_OK)
 8000926:	2102      	movs	r1, #2
 8000928:	2008      	movs	r0, #8
 800092a:	f7ff ffc9 	bl	80008c0 <PLL_MUL_Calculator>
 800092e:	4603      	mov	r3, r0
 8000930:	2b01      	cmp	r3, #1
 8000932:	d127      	bne.n	8000984 <MCAL_RCC_InitSysClock+0x74>
		{
			/**< Set configure PLL MUL value . */
			RCC_CFGR &= ~(0xF << RCC_CFGR_PLLMUL);
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a16      	ldr	r2, [pc, #88]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 800093a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800093e:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (RCC_PLL_MUL << RCC_CFGR_PLLMUL);
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 8000946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800094a:	6013      	str	r3, [r2, #0]
			/**< Enable the PLL . */
			SET_BIT(RCC_CR, RCC_CR_PLLON);
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MCAL_RCC_InitSysClock+0x88>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a11      	ldr	r2, [pc, #68]	; (8000998 <MCAL_RCC_InitSysClock+0x88>)
 8000952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000956:	6013      	str	r3, [r2, #0]
			/**< Wait until the PLL clock is stable. */
			while(!GET_BIT(RCC_CR, RCC_CR_PLLRDY));
 8000958:	bf00      	nop
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MCAL_RCC_InitSysClock+0x88>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f9      	beq.n	800095a <MCAL_RCC_InitSysClock+0x4a>
			/**< select PLL as SYSCLK without changing remaining bits. */
			RCC_CFGR &= ~(0b11 << RCC_CFGR_SW);
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 800096c:	f023 0303 	bic.w	r3, r3, #3
 8000970:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (0b10 << RCC_CFGR_SW);
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <MCAL_RCC_InitSysClock+0x84>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6013      	str	r3, [r2, #0]

			Local_FunctionStatus = E_OK;
 800097e:	2301      	movs	r3, #1
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	e001      	b.n	8000988 <MCAL_RCC_InitSysClock+0x78>
		}
		else
		{
			Local_FunctionStatus = E_NOT_OK;
 8000984:	2300      	movs	r3, #0
 8000986:	71fb      	strb	r3, [r7, #7]
    #else
        #error "Wrong Choice !!"

    #endif /**< RCC_SYSCLK */

    return Local_FunctionStatus;
 8000988:	79fb      	ldrb	r3, [r7, #7]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021004 	.word	0x40021004
 8000998:	40021000 	.word	0x40021000

0800099c <MCAL_RCC_EnablePeripheral>:

Std_ReturnType MCAL_RCC_EnablePeripheral(u8 Copy_BusId, u8 Copy_PeripheralId)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	460a      	mov	r2, r1
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]

    switch(Copy_BusId)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d020      	beq.n	80009f8 <MCAL_RCC_EnablePeripheral+0x5c>
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	dc2b      	bgt.n	8000a12 <MCAL_RCC_EnablePeripheral+0x76>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <MCAL_RCC_EnablePeripheral+0x28>
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d00d      	beq.n	80009de <MCAL_RCC_EnablePeripheral+0x42>
 80009c2:	e026      	b.n	8000a12 <MCAL_RCC_EnablePeripheral+0x76>
    {
        /**< Enable the peripheral on the AHB bus. */
        case RCC_AHB:
            SET_BIT(RCC_AHBENR, Copy_PeripheralId);
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MCAL_RCC_EnablePeripheral+0x88>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	79ba      	ldrb	r2, [r7, #6]
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <MCAL_RCC_EnablePeripheral+0x88>)
 80009d4:	430b      	orrs	r3, r1
 80009d6:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
            break;
 80009dc:	e01c      	b.n	8000a18 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB1 bus. */
        case RCC_APB1:
            SET_BIT(RCC_APB1ENR, Copy_PeripheralId);
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MCAL_RCC_EnablePeripheral+0x8c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	79ba      	ldrb	r2, [r7, #6]
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	4611      	mov	r1, r2
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <MCAL_RCC_EnablePeripheral+0x8c>)
 80009ee:	430b      	orrs	r3, r1
 80009f0:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
            break;
 80009f6:	e00f      	b.n	8000a18 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB2 bus. */
        case RCC_APB2:
            SET_BIT(RCC_APB2ENR, Copy_PeripheralId);
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MCAL_RCC_EnablePeripheral+0x90>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	79ba      	ldrb	r2, [r7, #6]
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	4611      	mov	r1, r2
 8000a06:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <MCAL_RCC_EnablePeripheral+0x90>)
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
            break;
 8000a10:	e002      	b.n	8000a18 <MCAL_RCC_EnablePeripheral+0x7c>

        default:
            Local_FunctionStatus = E_NOT_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
            break;
 8000a16:	bf00      	nop
    }

    return Local_FunctionStatus;
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40021014 	.word	0x40021014
 8000a28:	4002101c 	.word	0x4002101c
 8000a2c:	40021018 	.word	0x40021018

08000a30 <CLOCK_init>:
#include "GPIO_interface.h"



void CLOCK_init()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	MCAL_RCC_InitSysClock();   //PLL CLOCK SELECTED WITH EXTERNAL CLOCK 16 MHZ
 8000a34:	f7ff ff6c 	bl	8000910 <MCAL_RCC_InitSysClock>
	MCAL_RCC_EnablePeripheral(RCC_APB2,RCC_APB2ENR_IOPBEN);  //ENABLE PORTB
 8000a38:	2103      	movs	r1, #3
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f7ff ffae 	bl	800099c <MCAL_RCC_EnablePeripheral>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <GPIO_init>:

void GPIO_init()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	MCAL_GPIO_SetPinMode(GPIO_PORTB, GPIO_PIN0, GPIO_OUTPUT_PUSH_PULL_10MHZ);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fd6b 	bl	8000528 <MCAL_GPIO_SetPinMode>
	MCAL_GPIO_SetPinMode(GPIO_PORTB, GPIO_PIN1, GPIO_OUTPUT_PUSH_PULL_10MHZ);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2101      	movs	r1, #1
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fd66 	bl	8000528 <MCAL_GPIO_SetPinMode>

	MCAL_GPIO_SetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_INPUT_FLOATING_MOD);
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	210a      	movs	r1, #10
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff fd61 	bl	8000528 <MCAL_GPIO_SetPinMode>
	MCAL_GPIO_SetPinMode(GPIO_PORTB, GPIO_PIN11, GPIO_INPUT_FLOATING_MOD);
 8000a66:	2204      	movs	r2, #4
 8000a68:	210b      	movs	r1, #11
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff fd5c 	bl	8000528 <MCAL_GPIO_SetPinMode>



}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <main>:


int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	CLOCK_init();
 8000a7a:	f7ff ffd9 	bl	8000a30 <CLOCK_init>
	GPIO_init();
 8000a7e:	f7ff ffe1 	bl	8000a44 <GPIO_init>

	while(1){
		u8 VAL10, VAL11;
		MCAL_GPIO_GetPinValue(GPIO_PORTB,GPIO_PIN10,&VAL10);
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	461a      	mov	r2, r3
 8000a86:	210a      	movs	r1, #10
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fec1 	bl	8000810 <MCAL_GPIO_GetPinValue>
		MCAL_GPIO_GetPinValue(GPIO_PORTB,GPIO_PIN11,&VAL11);
 8000a8e:	1dbb      	adds	r3, r7, #6
 8000a90:	461a      	mov	r2, r3
 8000a92:	210b      	movs	r1, #11
 8000a94:	2001      	movs	r0, #1
 8000a96:	f7ff febb 	bl	8000810 <MCAL_GPIO_GetPinValue>
		if(VAL10 == 1)
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d105      	bne.n	8000aac <main+0x38>
		{
			MCAL_GPIO_SetPinValue(GPIO_PORTB,GPIO_PIN0, GPIO_HIGH);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff fe23 	bl	80006f0 <MCAL_GPIO_SetPinValue>
 8000aaa:	e004      	b.n	8000ab6 <main+0x42>
		}
		else{
			MCAL_GPIO_SetPinValue(GPIO_PORTB,GPIO_PIN0, GPIO_LOW);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fe1d 	bl	80006f0 <MCAL_GPIO_SetPinValue>

		}

		if(VAL11 == 0)
 8000ab6:	79bb      	ldrb	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d105      	bne.n	8000ac8 <main+0x54>
		{
			MCAL_GPIO_SetPinValue(GPIO_PORTB,GPIO_PIN1, GPIO_HIGH);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2101      	movs	r1, #1
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fe15 	bl	80006f0 <MCAL_GPIO_SetPinValue>
 8000ac6:	e7dc      	b.n	8000a82 <main+0xe>
		}
		else{
			MCAL_GPIO_SetPinValue(GPIO_PORTB,GPIO_PIN1, GPIO_LOW);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2101      	movs	r1, #1
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fe0f 	bl	80006f0 <MCAL_GPIO_SetPinValue>
	while(1){
 8000ad2:	e7d6      	b.n	8000a82 <main+0xe>

08000ad4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b02:	f000 f811 	bl	8000b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b06:	f7ff ffb5 	bl	8000a74 <main>

08000b0a <LoopForever>:

LoopForever:
  b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   r0, =_estack
 8000b0c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b18:	08000b90 	.word	0x08000b90
  ldr r2, =_sbss
 8000b1c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b20:	2000001c 	.word	0x2000001c

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <__libc_init_array>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	2600      	movs	r6, #0
 8000b2c:	4d0c      	ldr	r5, [pc, #48]	; (8000b60 <__libc_init_array+0x38>)
 8000b2e:	4c0d      	ldr	r4, [pc, #52]	; (8000b64 <__libc_init_array+0x3c>)
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	10a4      	asrs	r4, r4, #2
 8000b34:	42a6      	cmp	r6, r4
 8000b36:	d109      	bne.n	8000b4c <__libc_init_array+0x24>
 8000b38:	f000 f81a 	bl	8000b70 <_init>
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	4d0a      	ldr	r5, [pc, #40]	; (8000b68 <__libc_init_array+0x40>)
 8000b40:	4c0a      	ldr	r4, [pc, #40]	; (8000b6c <__libc_init_array+0x44>)
 8000b42:	1b64      	subs	r4, r4, r5
 8000b44:	10a4      	asrs	r4, r4, #2
 8000b46:	42a6      	cmp	r6, r4
 8000b48:	d105      	bne.n	8000b56 <__libc_init_array+0x2e>
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b50:	4798      	blx	r3
 8000b52:	3601      	adds	r6, #1
 8000b54:	e7ee      	b.n	8000b34 <__libc_init_array+0xc>
 8000b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b5a:	4798      	blx	r3
 8000b5c:	3601      	adds	r6, #1
 8000b5e:	e7f2      	b.n	8000b46 <__libc_init_array+0x1e>
 8000b60:	08000b88 	.word	0x08000b88
 8000b64:	08000b88 	.word	0x08000b88
 8000b68:	08000b88 	.word	0x08000b88
 8000b6c:	08000b8c 	.word	0x08000b8c

08000b70 <_init>:
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b72:	bf00      	nop
 8000b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b76:	bc08      	pop	{r3}
 8000b78:	469e      	mov	lr, r3
 8000b7a:	4770      	bx	lr

08000b7c <_fini>:
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7e:	bf00      	nop
 8000b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b82:	bc08      	pop	{r3}
 8000b84:	469e      	mov	lr, r3
 8000b86:	4770      	bx	lr
